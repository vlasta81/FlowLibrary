<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlowLibrary</name>
    </assembly>
    <members>
        <member name="T:FlowLibrary.Abstractions.CommandDecorator`2">
            <summary>
            Abstract base class for command decorators.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FlowLibrary.Abstractions.CommandDecorator`2.SetNext(FlowLibrary.Contracts.ICommand{`0,`1})">
            <summary>
            Sets the next decorator in the chain.
            </summary>
            <param name="decorator">The next decorator.</param>
        </member>
        <member name="M:FlowLibrary.Abstractions.CommandDecorator`2.ExecuteAsync(`0)">
            <summary>
            Executes the command asynchronously.
            </summary>
            <param name="request">The request object.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response object.</returns>
        </member>
        <member name="T:FlowLibrary.Abstractions.Responsibility`2">
            <summary>
            Represents an abstract base class for handling a request and producing a response.
            Implements the Chain of Responsibility pattern.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FlowLibrary.Abstractions.Responsibility`2.SetNext(FlowLibrary.Abstractions.Responsibility{`0,`1})">
            <summary>
            Sets the next handler in the chain of responsibility.
            </summary>
            <param name="next">The next handler.</param>
        </member>
        <member name="M:FlowLibrary.Abstractions.Responsibility`2.HandleAsync(`0)">
            <summary>
            Handles the request asynchronously. If the current handler cannot handle the request,
            it delegates to the next handler in the chain.
            </summary>
            <param name="request">The request to handle.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response.</returns>
        </member>
        <member name="T:FlowLibrary.Builders.CommandBuilder`2">
            <summary>
            A builder class for constructing command objects with optional decorators.
            </summary>
            <typeparam name="TRequest">The type of the request object.</typeparam>
            <typeparam name="TResponse">The type of the response object.</typeparam>
        </member>
        <member name="M:FlowLibrary.Builders.CommandBuilder`2.#ctor(System.IServiceProvider,System.Action{FlowLibrary.Contracts.ICommand{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Builders.CommandBuilder`2"/> class.
            </summary>
            <param name="serviceProvider">The service provider for resolving dependencies.</param>
            <param name="addCommand">The action to add the constructed command.</param>
        </member>
        <member name="M:FlowLibrary.Builders.CommandBuilder`2.SetCommand``1">
            <summary>
            Sets the command to be built.
            </summary>
            <typeparam name="TCommand">The type of the command to set.</typeparam>
            <returns>The current instance of <see cref="T:FlowLibrary.Builders.CommandBuilder`2"/>.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.CommandBuilder`2.WithDecorator``1">
            <summary>
            Adds a decorator to the command.
            </summary>
            <typeparam name="TDecorator">The type of the decorator to add.</typeparam>
            <returns>The current instance of <see cref="T:FlowLibrary.Builders.CommandBuilder`2"/>.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.CommandBuilder`2.Build">
            <summary>
            Builds the command and adds it using the provided action.
            </summary>
        </member>
        <member name="T:FlowLibrary.Builders.FlowBuilder`2">
            <summary>
            A builder class for constructing a flow with a command, chain of responsibilities, middlewares, and a response strategy.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FlowLibrary.Builders.FlowBuilder`2.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Builders.FlowBuilder`2"/> class.
            </summary>
            <param name="serviceProvider">The service provider for dependency injection.</param>
        </member>
        <member name="M:FlowLibrary.Builders.FlowBuilder`2.AddCommand">
            <summary>
            Adds a command to the flow.
            </summary>
            <returns>A <see cref="T:FlowLibrary.Builders.CommandBuilder`2"/> to configure the command.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if a command has already been added to the flow.</exception>
        </member>
        <member name="M:FlowLibrary.Builders.FlowBuilder`2.AddChainOfResponsibilities">
            <summary>
            Adds a chain of responsibilities to the flow.
            </summary>
            <returns>A <see cref="T:FlowLibrary.Builders.ResponsibilityBuilder`2"/> to configure the chain of responsibilities.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.FlowBuilder`2.AddMiddlewares">
            <summary>
            Adds middlewares to the flow.
            </summary>
            <returns>A <see cref="T:FlowLibrary.Builders.MiddlewaresBuilder`2"/> to configure the middlewares.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.FlowBuilder`2.SetResponseStrategy``1">
            <summary>
            Sets the response strategy for the flow.
            </summary>
            <typeparam name="TStrategy">The type of the response strategy.</typeparam>
            <returns>The current <see cref="T:FlowLibrary.Builders.FlowBuilder`2"/> instance.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.FlowBuilder`2.Build">
            <summary>
            Builds the flow processor with the configured components.
            </summary>
            <returns>A <see cref="T:FlowLibrary.Builders.FlowProcessor`2"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the command is not set.</exception>
        </member>
        <member name="T:FlowLibrary.Builders.FlowProcessor`2">
            <summary>
            The <see cref="T:FlowLibrary.Builders.FlowProcessor`2"/> class is responsible for processing a request through a series of middlewares, a command, and an optional chain of responsibility and response strategy.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FlowLibrary.Builders.FlowProcessor`2.#ctor(FlowLibrary.Contracts.ICommand{`0,`1},FlowLibrary.Abstractions.Responsibility{`0,`1},FlowLibrary.Contracts.IResponseStrategy{`1},System.Collections.Generic.List{FlowLibrary.Contracts.IMiddleware{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Builders.FlowProcessor`2"/> class.
            </summary>
            <param name="command">The command to execute if no middleware or chain handles the request.</param>
            <param name="chain">The optional chain of responsibility to handle the request.</param>
            <param name="strategy">The optional response strategy to apply to the command's response.</param>
            <param name="middlewares">The list of middlewares to process the request.</param>
        </member>
        <member name="M:FlowLibrary.Builders.FlowProcessor`2.InvokeMiddleware(System.Int32,`0)">
            <summary>
            Invokes the middleware at the specified index.
            </summary>
            <param name="index">The index of the middleware to invoke.</param>
            <param name="request">The request to process.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response from the middleware or the next middleware in the chain.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.FlowProcessor`2.ProcessAsync(`0)">
            <summary>
            Processes the request asynchronously through the chain of responsibility, middlewares, and command.
            </summary>
            <param name="request">The request to process.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response.</returns>
        </member>
        <member name="T:FlowLibrary.Builders.MiddlewaresBuilder`2">
            <summary>
            A builder class for configuring and adding middlewares to the middleware pipeline.
            </summary>
            <typeparam name="TRequest">The type of the request object.</typeparam>
            <typeparam name="TResponse">The type of the response object.</typeparam>
        </member>
        <member name="M:FlowLibrary.Builders.MiddlewaresBuilder`2.#ctor(System.IServiceProvider,System.Action{FlowLibrary.Contracts.IMiddleware{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Builders.MiddlewaresBuilder`2"/> class.
            </summary>
            <param name="serviceProvider">The service provider for resolving middleware instances.</param>
            <param name="addMiddleware">The action to add a middleware to the pipeline.</param>
        </member>
        <member name="M:FlowLibrary.Builders.MiddlewaresBuilder`2.Use``1">
            <summary>
            Adds a middleware of type <typeparamref name="TMiddleware"/> to the pipeline.
            </summary>
            <typeparam name="TMiddleware">The type of the middleware to add.</typeparam>
            <returns>The current instance of <see cref="T:FlowLibrary.Builders.MiddlewaresBuilder`2"/>.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.MiddlewaresBuilder`2.Build">
            <summary>
            Builds the middleware pipeline by adding all configured middlewares.
            </summary>
        </member>
        <member name="T:FlowLibrary.Builders.ResponsibilityBuilder`2">
            <summary>
            A builder class for constructing a chain of responsibility pattern.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FlowLibrary.Builders.ResponsibilityBuilder`2.#ctor(System.IServiceProvider,System.Action{FlowLibrary.Abstractions.Responsibility{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Builders.ResponsibilityBuilder`2"/> class.
            </summary>
            <param name="serviceProvider">The service provider for resolving dependencies.</param>
            <param name="addResponsibility">The action to add the constructed responsibility chain.</param>
        </member>
        <member name="M:FlowLibrary.Builders.ResponsibilityBuilder`2.SetNext``1">
            <summary>
            Sets the next responsibility in the chain.
            </summary>
            <typeparam name="TResponsibility">The type of the responsibility to add.</typeparam>
            <returns>The current instance of <see cref="T:FlowLibrary.Builders.ResponsibilityBuilder`2"/>.</returns>
        </member>
        <member name="M:FlowLibrary.Builders.ResponsibilityBuilder`2.Build">
            <summary>
            Builds the responsibility chain and adds it using the provided action.
            </summary>
        </member>
        <member name="T:FlowLibrary.Common.Repository`1">
            <summary>
            A generic repository class for performing CRUD operations on entities.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Common.Repository`1"/> class.
            </summary>
            <param name="context">The database context.</param>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.AddAsync(`0)">
            <summary>
            Adds an entity to the database asynchronously.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of entities to the database asynchronously.
            </summary>
            <param name="entities">The entities to add.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds entities in the database that match the specified predicate asynchronously.
            </summary>
            <param name="predicate">The predicate to filter the entities.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the list of entities that match the predicate.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.GetAllAsync">
            <summary>
            Gets all entities from the database asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the list of all entities.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.GetByIdAsync(System.Int32)">
            <summary>
            Gets an entity by its integer ID asynchronously.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the entity if found; otherwise, null.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.GetByIdAsync(System.Guid)">
            <summary>
            Gets an entity by its GUID ID asynchronously.
            </summary>
            <param name="id">The GUID ID of the entity.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the entity if found; otherwise, null.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.RemoveAsync(`0)">
            <summary>
            Removes an entity from the database asynchronously.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes a range of entities from the database asynchronously.
            </summary>
            <param name="entities">The entities to remove.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Common.Repository`1.UpdateAsync(`0)">
            <summary>
            Updates an entity in the database asynchronously.
            </summary>
            <param name="entity">The entity to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FlowLibrary.Common.RequestBody`1">
            <summary>
            Represents a request body wrapper for an API endpoint.
            </summary>
            <typeparam name="TBody">The type of the body content.</typeparam>
        </member>
        <member name="P:FlowLibrary.Common.RequestBody`1.Body">
            <summary>
            Gets or sets the body content of the request.
            </summary>
        </member>
        <member name="T:FlowLibrary.Common.Response">
            <summary>
            Represents a response with status code, success flag, title, and errors.
            </summary>
        </member>
        <member name="P:FlowLibrary.Common.Response.StatusCode">
            <summary>
            Gets or sets the status code of the response. Default is 400.
            </summary>
        </member>
        <member name="P:FlowLibrary.Common.Response.IsSuccessfully">
            <summary>
            Gets or sets a value indicating whether the response is successful. Default is false.
            </summary>
        </member>
        <member name="P:FlowLibrary.Common.Response.Title">
            <summary>
            Gets or sets the title of the response.
            </summary>
        </member>
        <member name="P:FlowLibrary.Common.Response.Errors">
            <summary>
            Gets or sets the collection of errors associated with the response.
            </summary>
        </member>
        <member name="M:FlowLibrary.Common.Response.#ctor(System.String,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Common.Response"/> class with specified title, status code, success flag, and errors.
            </summary>
            <param name="title">The title of the response.</param>
            <param name="statusCode">The status code of the response. Default is 400.</param>
            <param name="isSuccessfully">A value indicating whether the response is successful. Default is false.</param>
            <param name="errors">The collection of errors associated with the response.</param>
        </member>
        <member name="M:FlowLibrary.Common.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.Common.Response"/> class.
            </summary>
        </member>
        <member name="T:FlowLibrary.Contracts.ICommand`2">
            <summary>
            Represents a command that can be executed asynchronously with a request and response.
            </summary>
            <typeparam name="TRequest">The type of the request parameter.</typeparam>
            <typeparam name="TResponse">The type of the response result.</typeparam>
        </member>
        <member name="M:FlowLibrary.Contracts.ICommand`2.ExecuteAsync(`0)">
            <summary>
            Executes the command asynchronously with the specified request.
            </summary>
            <param name="request">The request parameter.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IEvent">
            <summary>
            Represents a contract for an event in the FlowLibrary.
            </summary>
        </member>
        <member name="T:FlowLibrary.Contracts.IEventHandler`1">
            <summary>
            Represents a handler for events of type <typeparamref name="IEvent"/>.
            </summary>
            <typeparam name="IEvent">The type of event to handle.</typeparam>
        </member>
        <member name="M:FlowLibrary.Contracts.IEventHandler`1.OnAsync(`0)">
            <summary>
            Handles the specified event asynchronously.
            </summary>
            <param name="event">The event to handle.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IFlowEvents">
            <summary>
            Interface for handling flow events.
            </summary>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowEvents.RaiseAsync``1(``0)">
            <summary>
            Raises an event asynchronously.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event to raise.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IFlowFactory">
            <summary>
            Interface for creating flow builders.
            </summary>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowFactory.CreateFor``2">
            <summary>
            Creates a flow builder for the specified request and response types.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <returns>A flow builder for the specified request and response types.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IFlowUnit">
            <summary>
            Represents a unit of work that encapsulates a set of operations to be performed on a repository.
            </summary>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowUnit.GetRepository``1">
            <summary>
            Gets the repository for the specified entity type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The repository for the specified entity type.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowUnit.SaveChangesAsync">
            <summary>
            Saves all changes made in this unit of work asynchronously.
            </summary>
            <returns>A task that represents the asynchronous save operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowUnit.BeginTransactionAsync">
            <summary>
            Begins a transaction asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowUnit.CommitTransactionAsync">
            <summary>
            Commits the current transaction asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowUnit.RollbackTransactionAsync">
            <summary>
            Rolls back the current transaction asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowUnit.ExecuteInTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified action within a transaction asynchronously and returns a result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the result of the action.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IFlowUnit.ExecuteInTransactionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the specified action within a transaction asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IMiddleware`2">
            <summary>
            Defines a middleware interface for processing requests and responses.
            </summary>
            <typeparam name="TRequest">The type of the request object.</typeparam>
            <typeparam name="TResponse">The type of the response object.</typeparam>
        </member>
        <member name="M:FlowLibrary.Contracts.IMiddleware`2.InvokeAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Invokes the middleware with the specified request and the next middleware in the pipeline.
            </summary>
            <param name="request">The request object.</param>
            <param name="next">The next middleware function in the pipeline.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response object.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IRepository`1">
            <summary>
            Generic repository interface for performing CRUD operations on entities.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.GetByIdAsync(System.Int32)">
            <summary>
            Gets an entity by its integer identifier.
            </summary>
            <param name="id">The integer identifier of the entity.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the entity if found; otherwise, null.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.GetByIdAsync(System.Guid)">
            <summary>
            Gets an entity by its GUID identifier.
            </summary>
            <param name="id">The GUID identifier of the entity.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the entity if found; otherwise, null.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.GetAllAsync">
            <summary>
            Gets all entities.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of all entities.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds entities based on a predicate.
            </summary>
            <param name="predicate">The expression to filter entities.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of entities that match the predicate.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.AddAsync(`0)">
            <summary>
            Adds a new entity.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of new entities.
            </summary>
            <param name="entities">The entities to add.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.RemoveAsync(`0)">
            <summary>
            Removes an entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes a range of entities.
            </summary>
            <param name="entities">The entities to remove.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.Contracts.IRepository`1.UpdateAsync(`0)">
            <summary>
            Updates an entity.
            </summary>
            <param name="entity">The entity to update.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IResponseStrategy`1">
            <summary>
            Defines a strategy for processing a response of type <typeparamref name="TResponse"/>.
            </summary>
            <typeparam name="TResponse">The type of the response to be processed.</typeparam>
        </member>
        <member name="M:FlowLibrary.Contracts.IResponseStrategy`1.ApplyStrategyAsync(`0)">
            <summary>
            Applies the strategy to the given response asynchronously.
            </summary>
            <param name="response">The response to which the strategy will be applied.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the processed response.</returns>
        </member>
        <member name="T:FlowLibrary.Contracts.IResponsibility`2">
            <summary>
            Defines a contract for handling a request and returning a response asynchronously.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:FlowLibrary.Contracts.IResponsibility`2.HandleAsync(`0)">
            <summary>
            Handles the specified request asynchronously and returns a response.
            </summary>
            <param name="request">The request to handle.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response.</returns>
        </member>
        <member name="T:FlowLibrary.Extensions.FlowExtension">
            <summary>
            Provides extension methods for setting up Flow services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:FlowLibrary.Extensions.FlowExtension.AddFlow``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            Adds Flow services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <typeparam name="TContext">The type of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> to use.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add services to.</param>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to scan for Flow components.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="T:FlowLibrary.Filters.FlowStatusCodeActionFilter">
            <summary>
            An action filter that sets the status code of the response based on the <see cref="P:FlowLibrary.Common.Response.StatusCode"/> property.
            </summary>
        </member>
        <member name="M:FlowLibrary.Filters.FlowStatusCodeActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Called before the action method is executed.
            </summary>
            <param name="context">The context for the action.</param>
        </member>
        <member name="M:FlowLibrary.Filters.FlowStatusCodeActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Called after the action method is executed.
            </summary>
            <param name="context">The context for the action.</param>
        </member>
        <member name="T:FlowLibrary.FlowEvents">
            <summary>
            Represents a class that handles the raising of events to their respective handlers.
            </summary>
        </member>
        <member name="M:FlowLibrary.FlowEvents.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.FlowEvents"/> class.
            </summary>
            <param name="serviceProvider">The service provider used to resolve event handlers.</param>
        </member>
        <member name="M:FlowLibrary.FlowEvents.RaiseAsync``1(``0)">
            <summary>
            Raises an event asynchronously to all registered event handlers.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event to raise.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FlowLibrary.FlowFactory">
            <summary>
            Factory class for creating instances of <see cref="T:FlowLibrary.Builders.FlowBuilder`2"/>.
            </summary>
        </member>
        <member name="M:FlowLibrary.FlowFactory.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.FlowFactory"/> class.
            </summary>
            <param name="serviceProvider">The service provider to be used for dependency injection.</param>
        </member>
        <member name="M:FlowLibrary.FlowFactory.CreateFor``2">
            <summary>
            Creates a new instance of <see cref="T:FlowLibrary.Builders.FlowBuilder`2"/>.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <returns>A new instance of <see cref="T:FlowLibrary.Builders.FlowBuilder`2"/>.</returns>
        </member>
        <member name="T:FlowLibrary.FlowUnit">
            <summary>
            Represents a unit of work that encapsulates a DbContext and provides methods for managing transactions and repositories.
            </summary>
        </member>
        <member name="M:FlowLibrary.FlowUnit.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FlowLibrary.FlowUnit"/> class.
            </summary>
            <param name="context">The DbContext to be used by this unit of work.</param>
        </member>
        <member name="M:FlowLibrary.FlowUnit.GetRepository``1">
            <summary>
            Gets the repository for the specified entity type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The repository for the specified entity type.</returns>
        </member>
        <member name="M:FlowLibrary.FlowUnit.SaveChangesAsync">
            <summary>
            Saves all changes made in this unit of work to the underlying database.
            </summary>
            <returns>The number of state entries written to the database.</returns>
        </member>
        <member name="M:FlowLibrary.FlowUnit.BeginTransactionAsync">
            <summary>
            Begins a new transaction.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if a transaction is already running.</exception>
        </member>
        <member name="M:FlowLibrary.FlowUnit.CommitTransactionAsync">
            <summary>
            Commits the current transaction.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.FlowUnit.RollbackTransactionAsync">
            <summary>
            Rolls back the current transaction.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.FlowUnit.ExecuteInTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified action within a transaction and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to be executed.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:FlowLibrary.FlowUnit.ExecuteInTransactionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the specified action within a transaction.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FlowLibrary.FlowUnit.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:FlowLibrary.FlowUnit"/>.
            </summary>
        </member>
        <member name="M:FlowLibrary.FlowUnit.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:FlowLibrary.FlowUnit"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
    </members>
</doc>
